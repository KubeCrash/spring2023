# This file shows examples of cert-manager resources to get a
# cert from Let's Encrypt using the HTTP01 solver.

# Create staging and production ClusterIssuers. With Let's Encrypt
# it is critical to test your configuration against their staging server
# first, as it is easy to go over the production rate limit with a
# failing configuration and be stuck.
#---
#apiVersion: cert-manager.io/v1
#kind: ClusterIssuer
#metadata:
#  name: letsencrypt-staging
#  namespace: cert-manager
#spec:
#  acme:
#    email: "dev@company.com"
#    server: "https://acme-staging-v02.api.letsencrypt.org/directory"
#    privateKeySecretRef:
#      name: le-staging-issuer-account-key
#    solvers:
#      - http01:
#          ingress:
#            class: 'nginx'
#---
#apiVersion: cert-manager.io/v1
#kind: ClusterIssuer
#metadata:
#  name: letsencrypt-production
#  namespace: cert-manager
#spec:
#  acme:
#    email: "dev@company.com"
#    server: "https://acme-v02.api.letsencrypt.org/directory"
#    privateKeySecretRef:
#      name: le-production-issuer-account-key
#    solvers:
#      - http01:
#          ingress:
#            class: 'nginx'

# Service and Mapping to allow LE requests to reach cert-manager solver pods
# This method requires that Emissary has a Host for this domain
# and the domain points to Emissary's public IP address.
#---
#apiVersion: v1
#kind: Service
#metadata:
#  name: acme-challenge-service
#  namespace: emissary
#spec:
#  ports:
#    - port: 80
#      targetPort: 8089
#  selector:
#    acme.cert-manager.io/http01-solver: 'true'
#---
#apiVersion: getambassador.io/v3alpha1
#kind: Mapping
#metadata:
#  name: acme-challenge-mapping
#  namespace: emissary
#spec:
#  hostname: '*'
#  prefix: /.well-known/acme-challenge/
#  rewrite: ''
#  service: acme-challenge-service.faces

# Create a staging certificate to test the configuration before
# attempting to create a production certificate.
#---
#apiVersion: cert-manager.io/v1
#kind: Certificate
#metadata:
#  name: faces-staging
#  namespace: emissary
#spec:
#  secretName: faces-mycompany-com-staging
#  duration: 2160h
#  renewBefore: 360h
#  dnsNames:
#  - demo.mycompany.com
#  issuerRef:
#    name: letsencrypt-staging
#    kind: ClusterIssuer

# Once the staging certificate is successfully created, we can
# create a production one for use with the Emissary-Ingress host.
#---
#apiVersion: cert-manager.io/v1
#kind: Certificate
#metadata:
#  name: demo
#  namespace: emissary
#spec:
#  secretName: demo-mycompany-com
#  duration: 2160h
#  renewBefore: 360h
#  dnsNames:
#    - demo.mycompany.com
#  issuerRef:
#    name: letsencrypt-production
#    kind: ClusterIssuer
